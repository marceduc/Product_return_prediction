getwd()
source("input_functions.R")
df = load_clean()
workdir = "/Users/deepthought42/Documents/Studium/BADS/new/BADS_coop/quantlets"
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
library(yamldebugger)
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
col = read.csv("colors.csv", stringsAsFactors = F)
getwd()
col$name = tolower(col$name)
df = read.csv("./baseline_models/full_prepared.csv")
item_color = tolower(unique(df$item_color))
getwd()
library(dplyr)
library(stringr)
col = read.csv("colors.csv", stringsAsFactors = F)
col$name = tolower(col$name)
df = read.csv("./baseline_models/full_prepared.csv")
item_color = tolower(unique(df$item_color))
df = read.csv("./baseline_models/full_prepared.csv")
df = read.csv("full_prepared.csv")
item_color = tolower(unique(df$item_color))
col_match = data.frame(item_color, hex = col$hex[match(item_color, col$name)], stringsAsFactors = F)
col_match$new_col = col_match$item_color
col_match$new_col[grep("blau", col_match$item_color)] = "blue"
col_match$new_col[grep("darkblue", col_match$item_color)] = "blue"
col_match$new_col[grep("brwon", col_match$item_color)] = "brown"
col_match$new_col[grepl("oliv", col_match$new_col)] = "olive"
col_match$new_col = str_replace_all(col_match$new_col, ".* ", "")
col_match$new_col = str_replace_all(col_match$new_col, "mocca", "mocha")
col_match$hex2 = col$hex[match(col_match$new_col, col$name)]
counts = data.frame(table(tolower(df$item_color)), stringsAsFactors = F)
names(counts)[1] = "item_color"
new = inner_join(col_match, counts)
new = cbind(new, t(col2rgb(new$hex2)))
min_count
new$new_col[which(is.na(new$hex2) & new$Freq < 100)] = "other"
too_less = which(!is.na(new$hex2) & new$Freq < 100)
d = as.matrix(dist(new[, 6:8]))
new$col3 = new$new_col
for (idx in too_less) {
print(new$col3[idx])
print(new$col3[which.min(d[idx, -idx])])
new$col3[idx] = new$col3[which.min(d[idx, -idx])]
}
write.csv(new, 'clean_col.csv')
getwd()
list.files()
source("color_formated.R")
rm(list = ls())
source("input_functions.R")
df = load_clean()
df = create_features(df)
source("input_functions.R")
df = load_clean()
df = create_features(df)
df$user_title = as.factor(ifelse(df$user_title == "Mrs", "female", "other"))
df = create_time_vars(df)
set.seed(420)
inTrainingSet <- createDataPartition(df$return, p = 0.75, list = FALSE)
View(df)
library(klaR)
source("color_formated.R")
rm(list = ls())
source("input_functions.R")
df = load_clean()
df = create_features(df)
getwd()
df = create_features(df)
source("input_functions.R")
df = create_features(df)
names(df)[names(df) == "order_item_id"] = "ID"
df                                      = df[!grepl("id", names(df))]
df                                      = df[, sapply(df, class) != "Date"]
return = df$return
df     = df[, -which(names(df) == "return")]
df     = cbind(return, df)
rm(return)
known = df[!is.na(df$return), ]
class = df[is.na(df$return), ]
rm(df)
library(caret)
set.seed(420)
inTrainingSet = createDataPartition(known$return, p = 0.75, list = FALSE)
tr            = known[inTrainingSet, ]
ts            = known[-inTrainingSet, ]
rm(known)
k = 5
set.seed(123)
folds = folds = cut(1:nrow(tr), k, labels = F)
folds = sample(folds)
tr    = cbind(folds, tr)
rm(folds)
factor_feats = names(tr)[which(unlist(sapply(tr, class)) == "factor")]
set.seed(100)
woe.idx = createDataPartition(y = tr$return, p = 0.25, list = FALSE)
tr$return = factor(tr$return, levels = c("1", "0"))
woe.object = woe(return ~ ., data = tr[woe.idx, ], zeroadj = 0.5)
tr$return = as.integer(as.character(tr$return))
datasets = list(class, tr, ts)
ds = lapply(datasets, function(x) predict(woe.object, newdata = x, replace = T))

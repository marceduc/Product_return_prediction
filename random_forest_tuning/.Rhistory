library(randomForest)
library(forecast)
library(ggplot2)
tr   = read.csv("../data/base_train3.csv")
maxtree  = 2500
X_cols   = !(names(tr) %in% c("ID", "folds", "return"))
OOB_err = read.csv('OBB_err n=75k ntry=2500.csv')[,2]
ma_full = ma(OOB_err, 100)
OBB_df = data.frame(OBB_Err = ma_full, nTree = 1:maxtree)
ggplot(OBB_df, aes(x = nTree, y = OOB_err)) + geom_line() + geom_hline(yintercept = min(OOB_err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OOB_err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + xlab("Number of Trees") + ylab("Out-of-Bag Error")
View(ma_full)
View(OBB_df)
OOB_err[50:60]
ma_full[50:60]
View(OBB_df)
?ggplot2
ggplot(OBB_df, aes(x = nTree, y = OOB_err)) + geom_line(data = OBB_df[!is.na(OBB_df$OBB_Err), ]) + geom_hline(yintercept = min(OOB_err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OOB_err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + xlab("Number of Trees") + ylab("Out-of-Bag Error")
ggplot(OBB_df, aes(x = nTree, y = OOB_err)) + geom_line() + geom_hline(yintercept = min(OOB_err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OOB_err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + xlab("Number of Trees") + ylab("Out-of-Bag Error")
ggplot(OBB_df, aes(x = nTree, y = OOB_err)) + geom_line()
OBB_df[!is.na(OBB_df$OBB_Err),]
ggplot(OBB_df[!is.na(OBB_df$OBB_Err),], aes(x = nTree, y = OOB_err)) + geom_line() + geom_hline(yintercept = min(OOB_err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OOB_err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + xlab("Number of Trees") + ylab("Out-of-Bag Error")
ggplot(OBB_df, aes(x = nTree, y = OOB_err)) + geom_line() + geom_hline(yintercept = min(OOB_err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OOB_err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + xlab("Number of Trees") + ylab("Out-of-Bag Error")
OBB_df = OBB_df[!is.na(OBB_df$OBB_Err),]
ggplot(OBB_df, aes(x = nTree, y = OOB_err)) + geom_line() + geom_hline(yintercept = min(OOB_err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OOB_err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + xlab("Number of Trees") + ylab("Out-of-Bag Error")
ma_full = ma(OOB_err, 100)
OBB_df = data.frame(OBB_Err = ma_full, nTree = 1:maxtree)
OBB_df = OBB_df[!is.na(OBB_df$OBB_Err),]
ggplot(OBB_df, aes(x = nTree, y = OOB_err)) + geom_line() + geom_hline(yintercept = min(OOB_err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OOB_err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + xlab("Number of Trees") + ylab("Out-of-Bag Error")
ggplot(OBB_df, aes(x = nTree, y = OOB_err)) + geom_line() + geom_hline(yintercept = min(OBB_df$OOB_err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OBB_df$OOB_err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + xlab("Number of Trees") + ylab("Out-of-Bag Error")
OBB_df$OOB_err
View(OBB_df)
ggplot(OBB_df, aes(x = nTree, y = OOB_err)) + geom_line() + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + xlab("Number of Trees") + ylab("Out-of-Bag Error")
View(OBB_df)
ggplot(OBB_df, aes(x = nTree, y = OOB_Err)) + geom_line() + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + xlab("Number of Trees") + ylab("Out-of-Bag Error")
ggplot(OBB_df, aes(x = nTree, y = OBB_Err)) + geom_line() + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + xlab("Number of Trees") + ylab("Out-of-Bag Error")
OOB_err = read.csv('OBB_err n=75k ntry=2500.csv')[,2]
ma_full = ma(OOB_err, 100)
OBB_df = data.frame(OBB_Err = ma_full, nTree = 1:maxtree)
OBB_df = OBB_df[!is.na(OBB_df$OBB_Err),]
ggplot(OBB_df, aes(x = nTree, y = OBB_Err)) + geom_line() + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + xlab("Number of Trees") + ylab("Out-of-Bag Error")
OOB_err = read.csv('OBB_err n=75k ntry=2500.csv')[,2]
OBB_df = data.frame(OBB_Err = ma_full, nTree = 1:maxtree)
ggplot(OBB_df, aes(x = nTree, y = OBB_Err)) + geom_line() + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + xlab("Number of Trees") + ylab("Out-of-Bag Error")
importance(rf_model)
maxtree  = 100
rf_model = randomForest(tr[, X_cols], factor(tr[, "return"]), ntree = maxtree)
importance(rf_model)
imp = data.frame(Feature = row.names(importance(rf_model)), Category = rep("", nrow(importance(rf_model))),
MeanDecreaseGini = importance(rf_model))
imp = imp[order(imp$MeanDecreaseGini, decreasing = T), ]
row.names(imp) = seq(1, nrow(imp), 1)
write.csv(imp, "Feat_importance.csv")
ntree = 100
floor(sqrt(ncol(tr[, X_cols])))
floor(sqrt(ncol(tr[, X_cols])))
mtrys = 1:20
k     = 1:max(tr$folds)
auc_mat = read.csv('AUC_mtry_CV.csv')
mtry_df2 = data.frame(AUC = rowMeans(auc_mat), mtry = seq(1, 20, 1))
ggplot(mtry_df2, aes(x = mtry, y = AUC)) + geom_line()
View(auc_mat)
auc_mat = read.csv('AUC_mtry_CV.csv', row.names = F)
auc_mat[,2:5]
auc_mat = auc_mat[,2:6]
mtry_df = melt(as.data.frame(t(auc_mat)))
library(reshape2)
mtry_df = melt(as.data.frame(t(auc_mat)))
ggplot(mtry_df, aes(x = variable, y = value)) + geom_boxplot()
mtry_df2 = data.frame(AUC = rowMeans(auc_mat), mtry = seq(1, 20, 1))
ggplot(mtry_df2, aes(x = mtry, y = AUC)) + geom_line()
k
names(mtry_df)
View(mtry_df)
names(mtry_df) = c("AUC", "Maximum number of Features")
ggplot(mtry_df, aes(x = variable, y = value)) + geom_boxplot()
mtry_df = melt(as.data.frame(t(auc_mat)))
names(mtry_df)
names(mtry_df) = c("Maximum number of Features", "AUC")
mtry_df$`Maximum number of Features` = substring(as.character(mtry_df$`Maximum number of Features`, 2,2)
ggplot(mtry_df, aes(x = variable, y = value)) + geom_boxplot()
# plot AUC values over mtry
mtry_df2 = data.frame(AUC = rowMeans(auc_mat), mtry = seq(1, 20, 1))
ggplot(mtry_df2, aes(x = mtry, y = AUC)) + geom_line()
mtry_df$`Maximum number of Features` = substring(as.character(mtry_df$`Maximum number of Features`, 2,2))
?substring
mtry_df = melt(as.data.frame(t(auc_mat)))
names(mtry_df) = c("Maximum number of Features", "AUC")
mtry_df$`Maximum number of Features` = substring(as.character(mtry_df$`Maximum number of Features`), 2,2)
ggplot(mtry_df, aes(x = variable, y = value)) + geom_boxplot()
ggplot(mtry_df, aes(x = `Maximum number of Features`, y = AUC)) + geom_boxplot()
mtry_df = melt(as.data.frame(t(auc_mat)))
names(mtry_df) = c("Maximum number of Features", "AUC")
mtry_df$`Maximum number of Features` = substring(as.character(mtry_df$`Maximum number of Features`), 2,2)
ggplot(mtry_df, aes(x = `Maximum number of Features`, y = AUC)) + geom_boxplot()
mtry_df = melt(as.data.frame(t(auc_mat)))
ggplot(mtry_df, aes(x = variable, y = value)) + geom_boxplot()
names(mtry_df) = c("Maximum number of Features", "AUC")
ggplot(mtry_df, aes(x = `Maximum number of Features`, y = AUC)) + geom_boxplot()
substring(as.character(mtry_df$`Maximum number of Features`), 2,2)
mtry_df$`Maximum number of Features` = substring(as.character(mtry_df$`Maximum number of Features`), 2,2)
ggplot(mtry_df, aes(x = `Maximum number of Features`, y = AUC)) + geom_boxplot()
str(mtry_df)
ggplot(mtry_df, aes(x = as.character(`Maximum number of Features`), y = AUC)) + geom_boxplot()
mtry_df = melt(as.data.frame(t(auc_mat)))
ggplot(mtry_df, aes(x = variable, y = value)) + geom_boxplot()
names(mtry_df) = c("Maximum number of features", "AUC")
ggplot(mtry_df, aes(x = `Maximum number of features`, y = AUC)) + geom_boxplot()
ggplot(imp.pl, aes(x = Segment, y = `Relative Importance`, fill = Attribute))+
geom_bar(stat="sum") + scale_fill_grey() +scale_size(guide=FALSE)
as.character(1:length(mtry_df$`Maximum number of features`))
mtry_df = melt(as.data.frame(t(auc_mat)))
mtry_df
mtry_df$`Maximum number of features` = substring(mtry_df$`Maximum number of features`, 2,nchar(mtry_df$`Maximum number of features`))
names(mtry_df) = c("Maximum number of features", "AUC")
mtry_df$`Maximum number of features` = substring(mtry_df$`Maximum number of features`, 2,nchar(mtry_df$`Maximum number of features`))
mtry_df$`Maximum number of features` = substring(as.character(mtry_df$`Maximum number of features`), 2,nchar())
str(mtry_df)
mtry_df = melt(as.data.frame(t(auc_mat)))
mtry_df$variable = as.character(mtry_df$variable)
names(mtry_df) = c("Maximum number of features", "AUC")
mtry_df$`Maximum number of features` = substring(mtry_df$`Maximum number of features`, 2,nchar(mtry_df$`Maximum number of features`))
ggplot(mtry_df, aes(x = as.character(`Maximum number of Features`), y = AUC)) + geom_boxplot()
ggplot(mtry_df, aes(x = as.character(`Maximum number of features`), y = AUC)) + geom_boxplot()
ggplot(mtry_df, aes(x = `Maximum number of features`, y = AUC)) + geom_boxplot()
mtry_df = melt(as.data.frame(t(auc_mat)))
mtry_df$variable = as.character(mtry_df$variable)
names(mtry_df) = c("Maximum number of features", "AUC")
mtry_df$`Maximum number of features` = as.numeric(substring(mtry_df$`Maximum number of features`, 2,nchar(mtry_df$`Maximum number of features`)))
ggplot(mtry_df, aes(x = `Maximum number of features`, y = AUC)) + geom_boxplot()
mtry_df$`Maximum number of features` = substring(mtry_df$`Maximum number of features`, 2,nchar(mtry_df$`Maximum number of features`))
mtry_df = melt(as.data.frame(t(auc_mat)))
mtry_df$variable = as.character(mtry_df$variable)
names(mtry_df) = c("Maximum number of features", "AUC")
mtry_df$`Maximum number of features` = substring(mtry_df$`Maximum number of features`, 2,nchar(mtry_df$`Maximum number of features`))
ggplot(mtry_df, aes(x = `Maximum number of features`, y = AUC)) + geom_boxplot()
str(mtry_df)
mtry_df
mtry_df$`Maximum number of features` = as.factor(substring(mtry_df$`Maximum number of features`, 2,nchar(mtry_df$`Maximum number of features`)))
ggplot(mtry_df, aes(x = `Maximum number of features`, y = AUC)) + geom_boxplot()
mtry_df = melt(as.data.frame(t(auc_mat)))
ggplot(mtry_df, aes(x = variable, y = value)) + geom_boxplot()
ggplot(mtry_df, aes(x = variable, y = value)) + geom_boxplot() + theme(axis.text.x= element_text(seq(1:20)))
mtry_df = melt(as.data.frame(t(auc_mat)))
ggplot(mtry_df, aes(x = variable, y = value)) + geom_boxplot()
mtry_df$`Maximum number of features` = as.factor(substring(mtry_df$`Maximum number of features`, 2,nchar(mtry_df$`Maximum number of features`)))
mtry_df = melt(as.data.frame(t(auc_mat)))
mtry_df$variable = as.character(mtry_df$variable)
names(mtry_df) = c("Maximum number of features", "AUC")
mtry_df$`Maximum number of features` = as.factor(substring(mtry_df$`Maximum number of features`, 2,nchar(mtry_df$`Maximum number of features`)))
ggplot(mtry_df, aes(x = `Maximum number of features`, y = AUC)) + geom_boxplot()
as.numeric("2")
mtry_df = melt(as.data.frame(t(auc_mat)))
names(mtry_df) = c("Maximum number of features", "AUC")
mtry_df = melt(as.data.frame(t(auc_mat)))
mtry_df$variable = as.character(mtry_df$variable)
names(mtry_df) = c("Maximum number of features", "AUC")
mtry_df$`Maximum number of features` = as.factor(substring(mtry_df$`Maximum number of features`, 2,nchar(mtry_df$`Maximum number of features`)))
ggplot(mtry_df, aes(x = `Maximum number of features`, y = AUC)) + geom_boxplot()
mtry_df = melt(as.data.frame(t(auc_mat)))
mtry_df$variable = as.character(mtry_df$variable)
names(mtry_df) = c("Maximum number of features", "AUC")
mtry_df$`Maximum number of features` =
as.factor(as.numeric(substring(mtry_df$`Maximum number of features`, 2,nchar(mtry_df$`Maximum number of features`))))
ggplot(mtry_df, aes(x = `Maximum number of features`, y = AUC)) + geom_boxplot()
ggplot(mtry_df, aes(x = `Maximum number of features`, y = AUC)) + geom_boxplot() + theme_bw()
ggplot(OBB_df, aes(x = nTree, y = OBB_Err)) + geom_line() + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + theme_bw()+ xlab("Number of Trees") + ylab("Out-of-Bag Error")
OOB_err = read.csv('OBB_err n=75k ntry=2500.csv')[,2]
ma_full = ma(OOB_err, 100)
OBB_df = data.frame(OBB_Err = ma_full, nTree = 1:maxtree)
ggplot(OBB_df, aes(x = nTree, y = OBB_Err)) + geom_line() + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + theme_bw()+ xlab("Number of Trees") + ylab("Out-of-Bag Error")
maxtree  = 2500
OBB_df = data.frame(OBB_Err = ma_full, nTree = 1:maxtree)
ggplot(OBB_df, aes(x = nTree, y = OBB_Err)) + geom_line() + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + theme_bw()+ xlab("Number of Trees") + ylab("Out-of-Bag Error")
library(pROC)
auc(list.files())
list.files()
tidy_source(file = "random_forest_tuning_formated.R")
library(formatR)
tidy_source(file = "random_forest_tuning_formated.R")
tidy_source(file = "random_forest_tuning_formated.r")
tidy_source(source = "random_forest_tuning_formated.r", file = "random_forest_tuning_formated.R")
list.files()
tidy_source(source = "random_forest_tuning_formated.r", file = "random_forest_tuning_formated.R")
library(formatR)
tidy_source(source = "random_forest_tuning_formated.r", file = "random_forest_tuning_formated.R")
list.files()
tidy_source(source = "random_forest_tuning.r", file = "random_forest_tuning_formated.R")
library(randomForest)
library(forecast)
library(ggplot2)
library(reshape2)
library(pROC)
tr = read.csv("../data/base_train3.csv")
maxtree = 2500
maxtree = 100
X_cols = !(names(tr) %in% c("ID", "folds", "return"))
rf_model = randomForest(tr[, X_cols], factor(tr[, "return"]), ntree = maxtree)
OOB_err = read.csv("OBB_err n=75k ntry=2500.csv")[, 2]
ma_full = ma(OOB_err, 100)  # smooth OBB_err
OBB_df = data.frame(OBB_Err = ma_full, nTree = 1:maxtree)  # plot OBB over number of trees built
ggplot(OBB_df, aes(x = nTree, y = OBB_Err)) + geom_line() + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + theme_bw() + xlab("Number of Trees") +
ylab("Out-of-Bag Error")
maxtree = 2500
ggplot(OBB_df, aes(x = nTree, y = OBB_Err)) + geom_line() + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + theme_bw() + xlab("Number of Trees") +
ylab("Out-of-Bag Error")
OOB_err = read.csv("OBB_err n=75k ntry=2500.csv")[, 2]
ma_full = ma(OOB_err, 100)  # smooth OBB_err
OBB_df = data.frame(OBB_Err = ma_full, nTree = 1:maxtree)  # plot OBB over number of trees built
ggplot(OBB_df, aes(x = nTree, y = OBB_Err)) + geom_line() + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OBB_df$OBB_Err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + theme_bw() + xlab("Number of Trees") +
ylab("Out-of-Bag Error")
floor(sqrt(ncol(tr[, X_cols])))
library(forecast)
?forecast
?ma
library(randomForest)
library(forecast)
library(ggplot2)
library(reshape2)
library(pROC)
tr = read.csv("../data/base_train3.csv")
maxtree  = 2500 # define max number of trees
X_cols   = !(names(tr) %in% c("ID", "folds", "return")) # remove irrelevant columns
OOB_err = read.csv("OBB_err n=75k ntry=2500.csv")[, 2]
ma_full = ma(OOB_err, 100)
OOB_df  = data.frame(OOB_Err = ma_full, nTree = 1:maxtree)
ggplot(OOB_df, aes(x = nTree, y = OOB_Err)) + geom_line() + geom_hline(yintercept = min(OOB_df$OOB_Err,
na.rm = T), color = "red", linetype = "dashed") + geom_hline(yintercept = min(OOB_df$OOB_Err,
na.rm = T) + 0.001, color = "red", linetype = "dashed") + theme_bw() + xlab("Number of Trees") +
ylab("Out-of-Bag Error")
maxtree = 100
rf_model = randomForest(tr[, X_cols], factor(tr[, "return"]), ntree = maxtree)
head(rf_model$err.rate)
1/1000
1/1000 *100
getwd()
library(formatR)
?format.person
tidy_source(file = "create_input_df.R")
tr = read.csv("base_train3.csv")
